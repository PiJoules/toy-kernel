#ifndef VECTOR_H_
#define VECTOR_H_

#include <iterator.h>

#include <algorithm>
#include <cassert>
#include <cstdlib>
#include <initializer_list>
#include <new>

/**
 * Naive header-only vector implementation.
 *
 * Note that alignment of data stored in by default will use kMaxAlignment.
 */

namespace std {

template <typename T, size_t InitCapacity = 8>
class vector {
 public:
  static_assert(InitCapacity > 0,
                "The initial vector capacity should be non-zero.");
  vector()
      : size_(0), capacity_(InitCapacity), data_(ext::malloc<T>(capacity_)) {}

  /**
   * This is undefined if [start, end) is invalid.
   */
  vector(const T *start, const T *end)
      : size_(static_cast<size_t>(end - start)),
        capacity_(std::max(InitCapacity, size_)),
        data_(ext::malloc<T>(capacity_)) {
    assert(start <= end && "Invalid pointer range");
    for (size_t i = 0; i < size_; ++i) { new (&data_[i]) T(start[i]); }
  }

  vector(toy::InitializerList<T> l)
      : size_(l.size()),
        capacity_(std::max(InitCapacity, size_)),
        data_(ext::malloc<T>(capacity_)) {
    for (size_t i = 0; i < size_; ++i) { new (&data_[i]) T(l[i]); }
  }

  vector(const vector<T> &other)
      : size_(other.size()),
        capacity_(max(InitCapacity, other.size_)),
        data_(ext::malloc<T>(capacity_)) {
    for (size_t i = 0; i < size_; ++i) { new (&data_[i]) T(other[i]); }
  }

  vector(vector<T> &&other)
      : size_(other.size_),
        capacity_(other.capacity_),
        data_(ext::malloc<T>(capacity_)) {
    for (size_t i = 0; i < size_; ++i) {
      new (&data_[i]) T(std::move(other[i]));
    }

    // After the move, `other` is guaranteed to be empty().
    other.size_ = 0;
  }

  ~vector() {
    for (size_t i = 0; i < size_; ++i) { data_[i].~T(); }
    free(data_);
  }

  size_t size() const { return size_; }
  bool empty() const { return size_ == 0; }

  void resize(size_t size) {
    // FIXME: We should just be able to do this once rather than in a loop.
    while (size_ < size) IncrementSize();
  }

  void push_back(const T &item) {
    IncrementSize();
    new (&data_[size_ - 1]) T(item);
  }
  void push_back(T &&item) {
    IncrementSize();
    new (&data_[size_ - 1]) T(std::move(item));
  }

  T &operator[](size_t index) { return data_[index]; }
  const T &operator[](size_t index) const { return data_[index]; }

  T &back() { return data_[size_ - 1]; }
  const T &back() const { return data_[size_ - 1]; }

  ext::PointerIterator<T> begin() const { return ext::PointerIterator(data_); }
  ext::PointerIterator<T> end() const {
    return ext::PointerIterator(data_ + size_);
  }

  ext::PointerIterator<T> find(const T &ref) const {
    for (auto it = begin(); it != end(); ++it) {
      if (*it == ref) return it;
    }
    return end();
  }

  bool contains(const T &ref) const { return find(ref) != end(); }

  // FIXME: This should return an iterator pointing to the next element
  // after the removed one.
  void erase(ext::PointerIterator<T> iter) {
    for (auto it = begin(); it != end(); ++it) {
      if (it == iter) {
        it->~T();

        // Move data back.
        int32_t pos = it - begin();
        int32_t remaining = end() - (it + 1);
        assert(remaining >= 0);
        memmove(data_ + pos, data_ + pos + 1,
                static_cast<size_t>(remaining) * sizeof(T));

        DecrementSize();
        return;
      }
    }
  }

  const T *data() const { return data_; }

 private:
  void IncrementSize() {
    ++size_;
    if (size_ > capacity_) {
      // Resize.
      capacity_ <<= 1;
      assert(capacity_ >= size_ && "Not enough capacity after push_back");
      data_ = ext::realloc<T>(data_, capacity_);
      assert(data_ && "Could not request more storage");
    }
  }

  void DecrementSize() {
    // TODO: It would be nice to return back some memory.
    --size_;
  }

  size_t size_;
  size_t capacity_;
  T *data_;
};

}  // namespace std

#endif
